// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Server.DataAccess;

#nullable disable

namespace Server.DataAccess.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Server.DataAccess.Entities.HostEntities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Hostname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("hostname");

                    b.HasKey("Id")
                        .HasName("host_pkey");

                    b.HasIndex(new[] { "Hostname" }, "host_hostname_key")
                        .IsUnique();

                    b.ToTable("host", (string)null);
                });

            modelBuilder.Entity("Server.DataAccess.Entities.HostSoftwareEntities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Added")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("added")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Hostid")
                        .HasColumnType("integer")
                        .HasColumnName("hostid");

                    b.Property<bool>("Isdeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isdeleted");

                    b.Property<int>("Softwareid")
                        .HasColumnType("integer")
                        .HasColumnName("softwareid");

                    b.HasKey("Id")
                        .HasName("host_software_pkey");

                    b.HasIndex("Hostid");

                    b.HasIndex("Softwareid");

                    b.ToTable("host_software", (string)null);
                });

            modelBuilder.Entity("Server.DataAccess.Entities.PublisherEntities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("publisher_pkey");

                    b.HasIndex(new[] { "Title" }, "publisher_title_key")
                        .IsUnique();

                    b.ToTable("publisher", (string)null);
                });

            modelBuilder.Entity("Server.DataAccess.Entities.SoftwareEntities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Publisherid")
                        .HasColumnType("integer")
                        .HasColumnName("publisherid");

                    b.Property<string>("Version")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("software_pkey");

                    b.HasIndex("Publisherid");

                    b.ToTable("software", (string)null);
                });

            modelBuilder.Entity("Server.DataAccess.Entities.HostSoftwareEntities", b =>
                {
                    b.HasOne("Server.DataAccess.Entities.HostEntities", "Host")
                        .WithMany("HostSoftwares")
                        .HasForeignKey("Hostid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("host_software_hostid_fkey");

                    b.HasOne("Server.DataAccess.Entities.SoftwareEntities", "Software")
                        .WithMany("HostSoftwares")
                        .HasForeignKey("Softwareid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("host_software_softwareid_fkey");

                    b.Navigation("Host");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("Server.DataAccess.Entities.SoftwareEntities", b =>
                {
                    b.HasOne("Server.DataAccess.Entities.PublisherEntities", "Publisher")
                        .WithMany("Softwares")
                        .HasForeignKey("Publisherid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("software_publisherid_fkey");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Server.DataAccess.Entities.HostEntities", b =>
                {
                    b.Navigation("HostSoftwares");
                });

            modelBuilder.Entity("Server.DataAccess.Entities.PublisherEntities", b =>
                {
                    b.Navigation("Softwares");
                });

            modelBuilder.Entity("Server.DataAccess.Entities.SoftwareEntities", b =>
                {
                    b.Navigation("HostSoftwares");
                });
#pragma warning restore 612, 618
        }
    }
}
